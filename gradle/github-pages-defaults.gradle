import static edu.uw.concert.gradle.gitflow.version.VersionType.*

def releaseDestination = "release/${version.normalVersion}"
def developDestination = 'develop'
def destination


if (version.type in [RELEASE, PRE_RELEASE]) {
    destination = releaseDestination
} else {
    destination = developDestination
}


githubPages {
    commitMessage "Publish of Github pages from Gradle for ${version}."
    deleteExistingFiles false

    pages {
        into destination

        with copySpec {
            into 'doc'

            with copySpec {
                from javadoc
                into 'javadoc'
            }

            if (project.hasProperty('groovydoc')) {
                with copySpec {
                    from groovydoc
                    into 'groovydoc'
                }
            }
        }

        if (version.type != RELEASE) {
            with copySpec {
                from jar, javadocJar, sourcesJar
                rename { it.replace version.toString(), "${project.gitflow.preReleaseIds.develop}" }
            }

            if (project.hasProperty('groovydocJar')) {
                with copySpec {
                    from groovydocJar
                    rename { it.replace version.toString(), "${project.gitflow.preReleaseIds.develop}" }
                }
            }
        }
    }

    repoUri "https://github.com/${rootProject.githubUser}/${rootProject.name}.git"

    if (project.hasProperty('githubApiKey')) {
        credentials {
            username = githubApiKey
            password = ''
        }
    }
}


publish.dependsOn publishGhPages
